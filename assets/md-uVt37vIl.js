import{aJ as m,b as p,o as s,w as d,g as u,i as f,ah as e,f as r,ad as n,v,x,S as l}from"./modules/vue-ByaFkLfc.js";import{I as k}from"./slidev/default-OSQRsGrB.js";import{u as b,f as B}from"./slidev/context-C-rGaWvD.js";import"./index-hztOwWZi.js";import"./modules/shiki-DxovNVNZ.js";const C={class:"mb-3"},_={class:"mb-8"},w={class:"mb-10"},N={class:"mb-10"},T={__name:"slides.md__slidev_44",setup(P){const{$clicksContext:i,$frontmatter:a}=b();return i.setup(),(V,t)=>{const o=m("click");return s(),p(k,v(x(l(B)(l(a),43))),{default:d(()=>[t[8]||(t[8]=u("h1",null,"複習分層設計的原則",-1)),f(" 後面會再次詳細提到 "),e((s(),r("h3",C,t[0]||(t[0]=[n("🔺原則 1：讓實作更直觀")]))),[[o]]),e((s(),r("pre",_,t[1]||(t[1]=[n(`在直觀的程式中，元素的「細節程度」都差不多，若混雜不同的「細節程度」，則可視為有「程式碼異味」
🔹 程式碼異味：可能有潛在問題的程式碼特徵
🔹 本書中的「細節程度」和「抽象層級」可當同義詞看待，後面會再說明
`)]))),[[o]]),e((s(),r("h3",null,t[2]||(t[2]=[n("🔺原則 2：以抽象屏障輔助實作")]))),[[o]]),e((s(),r("p",w,t[3]||(t[3]=[n("可以把某些「層」(layers) 當成「屏障」 (也可叫介面 interface)，屏障可以隱藏實作細節，讓我們更專注在特定層的程式碼運作")]))),[[o]]),e((s(),r("h3",null,t[4]||(t[4]=[n("🔺原則 3：讓下層函式保持簡約不變")]))),[[o]]),e((s(),r("p",N,t[5]||(t[5]=[n("為了提高維護性，低層級（底層）的函式盡量越簡單越好，並用它來直接或間接定義上層函式")]))),[[o]]),e((s(),r("h3",null,t[6]||(t[6]=[n("🔺原則 4：分層只要舒適即可")]))),[[o]]),e((s(),r("p",null,t[7]||(t[7]=[n("勿過度追求完美")]))),[[o]])]),_:1},16)}}};export{T as default};
